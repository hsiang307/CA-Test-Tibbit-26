'DEFINES-------------------------------------------------------------
#ifndef TBT26_SPI_CS
	#define TBT26_SPI_CS PL_IO_NULL
#endif

#ifndef TBT26_SPI_CLK
	#define TBT26_SPI_CLK PL_IO_NULL
#endif

#ifndef TBT26_SPI_MOSI
	#define TBT26_SPI_MOSI PL_IO_NULL
#endif

#ifndef TBT26_SPI_MISO
	#define TBT26_SPI_MISO PL_IO_NULL
#endif

enum errcheck
	TBT26_OK,
	TBT26_INIT_FAILURE,
	TBT26_NO_SSI_AVAILABLE
end enum


'INCLUDES------------------------------------------------------------


'DECLARATIONS--------------------------------------------------------
declare function tbt26_init()as errcheck
'Call this function to initialize the Tibbit.
'This library requires an SSI channel. If all channels are already occupied then this function will return TBT26_NO_SSI_AVAILABLE.

declare sub tbt26_start_recording(inverted as no_yes, carrier as no_yes, freq as word)
'Call this function to start the IR signal recording process, i.e. before pressing a button on a remote control you want to clone.
'Call tbt26_get_data() to read out the recorded data (after you've pressed the button on the remote control you are cloning).<br><br>
'Arguments:<br><br>
'inverted: NO- for receivers that output LOW when the IR light is detected, YES- for receivers that output HIGH when the IR light is detected.<br><br>
'carrier: NO- carrier frequency is not present in the incoming IR stream, YES- carrier frequency is present.<br><br>
'freq_div (used only when carrier=NO): frequency divider for the EXPECTED carrier frequency. The formula is freq_div = 12MHz / carrier_freq.<br><br>
'Returns: IR data. First two bytes are low and high bytes of the divider value for the carrier frequency.
'Subsequent byte pairs are low and high bytes of "IR ON" and "IR OFF" periods of the signal expressed in clocks of the carrier frequency.<br><br>

declare function tbt26_get_data() as string
'Call this function to read out the recorded IR signal. Do this only after the signal has been received
'(after you've pressed the button on the remote control you are cloning).

declare sub tbt26_play_back(byref dt as string, inverted as no_yes)
'Call this function to play back the IR command.<br><br>
'Arguments:<br><br>
'dt: IR data. First two bytes are low and high bytes of the divider value for the carrier frequency (modulation_freq = 12MHz / freq_div).
'Subsequent byte pairs are low and high bytes of "IR ON" and "IR OFF" periods of the signal expressed in clocks of the carrier frequency.<br><br>
'inverted: NO- for emitters that turn on when the IR OUTPUT is LOW, YES- for emitters that turn on when the IR OUTPUT is HIGH.